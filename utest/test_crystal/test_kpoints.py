import pytest
from radtools.crystal.kpoints import Kpoints
import numpy as np


points = {
    "Gamma": [0, 0, 0],
    "K": [0.5, 0.5, 0],
    "R": [0.5, 0.5, 0.5],
    "X": [0.5, 0, 0],
    "Y": [0, 0.5, 0],
    "Z": [0, 0, 0.5],
    "E": [0.5, 0.5, 1],
    "F": [0.5, 0, 0.5],
    "A": [0, 0.5, 0.5],
    "Q": [0.5, 0.5, 0.5],
}

labels = {
    "Gamma": R"$\Gamma$",
    "K": "K",
    "R": "R",
    "X": "X",
    "Y": "Y",
    "Z": "Z",
    "E": "E",
    "F": "F",
    "A": "A",
    "Q": "Q",
}
paths = [
    [["Gamma", "K", "R"]],
    [["X", "Y", "Z"], ["R", "E"]],
    [["X", "Y", "Z"], ["R", "E"], ["F", "A", "Q"]],
]
correct_labels = [
    [R"$\Gamma$", "K", "R"],
    ["X", "Y", "Z|R", "E"],
    ["X", "Y", "Z|R", "E|F", "A", "Q"],
]
correct_coordinates = [
    np.array([0, 0.7071067811865476, 1.2071067811865475]),
    np.array([0, 0.7071067811865476, 1.4142135623730951, 1.9142135623730951]),
    np.array(
        [
            0,
            0.7071067811865476,
            1.4142135623730951,
            1.9142135623730951,
            2.621320343559643,
            3.121320343559643,
        ]
    ),
]

correct_points = [
    np.array(
        [
            [0, 0, 0, 0],  # Gamma
            [0.1, 0.1, 0, 0.14142135623730953],
            [0.2, 0.2, 0, 0.28284271247461906],
            [0.3, 0.3, 0, 0.42426406871192857],
            [0.4, 0.4, 0, 0.5656854249492381],
            [0.5, 0.5, 0, 0.7071067811865477],  # K
            [0.5, 0.5, 0, 0.7071067811865477],  # K
            [0.5, 0.5, 0.1, 0.8071067811865477],
            [0.5, 0.5, 0.2, 0.90710678118654777],
            [0.5, 0.5, 0.3, 1.0071067811865477],
            [0.5, 0.5, 0.4, 1.1071067811865477],
            [0.5, 0.5, 0.5, 1.2071067811865477],  # R
        ]
    ),
    np.array(
        [
            [0.5, 0, 0, 0],  # X
            [0.4, 0.1, 0, 0.14142135623730953],
            [0.3, 0.2, 0, 0.28284271247461906],
            [0.2, 0.3, 0, 0.42426406871192857],
            [0.1, 0.4, 0, 0.5656854249492381],
            [0, 0.5, 0, 0.7071067811865477],  # Y
            [0, 0.5, 0, 0.7071067811865477],  # Y
            [0, 0.4, 0.1, 0.8485281374238571],
            [0, 0.3, 0.2, 0.9899494936611667],
            [0, 0.2, 0.3, 1.1313708498984762],
            [0, 0.1, 0.4, 1.2727922061357857],
            [0, 0, 0.5, 1.4142135623730954],  # Z
            [0.5, 0.5, 0.5, 1.4142135623730954],  # R
            [0.5, 0.5, 0.6, 1.5142135623730954],
            [0.5, 0.5, 0.7, 1.6142135623730954],
            [0.5, 0.5, 0.8, 1.7142135623730954],
            [0.5, 0.5, 0.9, 1.8142135623730954],
            [0.5, 0.5, 1, 1.9142135623730954],  # E
        ]
    ),
    np.array(
        [
            [0.5, 0, 0, 0],  # X
            [0.4, 0.1, 0, 0.14142135623730953],
            [0.3, 0.2, 0, 0.28284271247461906],
            [0.2, 0.3, 0, 0.42426406871192857],
            [0.1, 0.4, 0, 0.5656854249492381],
            [0, 0.5, 0, 0.7071067811865477],  # Y
            [0, 0.5, 0, 0.7071067811865477],  # Y
            [0, 0.4, 0.1, 0.8485281374238571],
            [0, 0.3, 0.2, 0.9899494936611667],
            [0, 0.2, 0.3, 1.1313708498984762],
            [0, 0.1, 0.4, 1.2727922061357857],
            [0, 0, 0.5, 1.4142135623730954],  # Z
            [0.5, 0.5, 0.5, 1.4142135623730954],  # R
            [0.5, 0.5, 0.6, 1.5142135623730954],
            [0.5, 0.5, 0.7, 1.6142135623730954],
            [0.5, 0.5, 0.8, 1.7142135623730954],
            [0.5, 0.5, 0.9, 1.8142135623730954],
            [0.5, 0.5, 1, 1.9142135623730954],  # E
            [0.5, 0, 0.5, 1.9142135623730954],  # F
            [0.4, 0.1, 0.5, 2.055634918610405],
            [0.3, 0.2, 0.5, 2.1970562748477143],
            [0.2, 0.3, 0.5, 2.338477631085024],
            [0.1, 0.4, 0.5, 2.4798989873223336],
            [0, 0.5, 0.5, 2.621320343559643],  # A
            [0, 0.5, 0.5, 2.621320343559643],  # A
            [0.1, 0.5, 0.5, 2.721320343559643],
            [0.2, 0.5, 0.5, 2.821320343559643],
            [0.3, 0.5, 0.5, 2.921320343559643],
            [0.4, 0.5, 0.5, 3.021320343559643],
            [0.5, 0.5, 0.5, 3.121320343559643],  # Q
        ]
    ),
]

input = []
for i in range(len(paths)):
    input.append(
        (
            paths[i],
            correct_labels[i],
            correct_coordinates[i],
            correct_points[i][:, :3],
            correct_points[i][:, 3],
        )
    )


@pytest.mark.parametrize("path, cor_lab, cor_coord, cor_points, cor_flat_points", input)
def test_labels(path, cor_lab, cor_coord, cor_points, cor_flat_points):
    kp = Kpoints(path, points, labels, n=4)
    assert kp.labels == cor_lab


@pytest.mark.parametrize("path, cor_lab, cor_coord, cor_points, cor_flat_points", input)
def test_coordinates(path, cor_lab, cor_coord, cor_points, cor_flat_points):
    kp = Kpoints(path, points, labels, n=4)
    assert (np.abs(kp.coordinates - cor_coord) < 1e-5).all()


@pytest.mark.parametrize("path, cor_lab, cor_coord, cor_points, cor_flat_points", input)
def test_points(path, cor_lab, cor_coord, cor_points, cor_flat_points):
    kp = Kpoints(path, points, labels, n=4)
    assert (np.abs(kp.points - cor_points) < 1e-5).all()


@pytest.mark.parametrize("path, cor_lab, cor_coord, cor_points, cor_flat_points", input)
def test_flatten_points(path, cor_lab, cor_coord, cor_points, cor_flat_points):
    kp = Kpoints(path, points, labels, n=4)
    assert (np.abs(kp.flatten_points - cor_flat_points) < 1e-5).all()
