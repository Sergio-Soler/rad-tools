import pytest

from rad_tools.crystal.decomposition import *
from rad_tools.crystal.bravais_lattice import examples

lattices = [
    "CUB",
    "FCC",
    "BCC",
    "TET",
    "BCT1",
    "BCT2",
    "ORC",
    "ORCF1",
    "ORCF2",
    "ORCF3",
    "ORCI",
    "ORCC",
    "HEX",
    "RHL1",
    "RHL2",
    "MCL",
    "MCLC1",
    "MCLC2",
    "MCLC3",
    "MCLC4",
    "MCLC5",
    "TRI1a",
    "TRI2a",
    "TRI1b",
    "TRI2b",
]


# TEST PLANES
planes_test = [
    # CUB
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
    },
    # FCC
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, 1 / 2, 0),
        (-1 / 2, -1 / 2, 0),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # BCC
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
        (0, 1 / 2, -1 / 2),
        (0, -1 / 2, 1 / 2),
        (1 / 2, 0, -1 / 2),
        (-1 / 2, 0, 1 / 2),
    },
    # TET
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
    },
    # BCT1
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
        (0, 1 / 2, -1 / 2),
        (0, -1 / 2, 1 / 2),
        (1 / 2, 0, -1 / 2),
        (-1 / 2, 0, 1 / 2),
    },
    # BCT2
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
        (0, 1 / 2, -1 / 2),
        (0, -1 / 2, 1 / 2),
        (1 / 2, 0, -1 / 2),
        (-1 / 2, 0, 1 / 2),
        (1 / 2, 1 / 2, -1 / 2),
        (-1 / 2, -1 / 2, 1 / 2),
    },
    # ORC
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
    },
    # ORCF1
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, 1 / 2, 0),
        (-1 / 2, -1 / 2, 0),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # ORCF2
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, 1 / 2, 0),
        (-1 / 2, -1 / 2, 0),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # ORCF3
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, 1 / 2, 0),
        (-1 / 2, -1 / 2, 0),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # ORCI
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
        (0, 1 / 2, -1 / 2),
        (0, -1 / 2, 1 / 2),
        (1 / 2, 0, -1 / 2),
        (-1 / 2, 0, 1 / 2),
        (1 / 2, 1 / 2, -1 / 2),
        (-1 / 2, -1 / 2, 1 / 2),
    },
    # ORCC
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
    },
    # HEX
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, -1 / 2, 0),
        (-1 / 2, 1 / 2, 0),
    },
    # RHL1
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, 1 / 2, 0),
        (-1 / 2, -1 / 2, 0),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # RHL2
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
        (0, 1 / 2, -1 / 2),
        (0, -1 / 2, 1 / 2),
        (1 / 2, 0, -1 / 2),
        (-1 / 2, 0, 1 / 2),
    },
    # MCL
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
    },
    # MCLC1
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, 1 / 2, 0),
        (-1 / 2, -1 / 2, 0),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # MCLC2
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # MCLC3
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
    },
    # MCLC4
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
    },
    # MCLC5
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (-1 / 2, 1 / 2, 0),
        (1 / 2, -1 / 2, 0),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # TRI1a
    {
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (1 / 2, 1 / 2, 0),
        (-1 / 2, -1 / 2, 0),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # TRI2a
    {
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 1 / 2),
        (0, -1 / 2, -1 / 2),
        (1 / 2, 0, 1 / 2),
        (-1 / 2, 0, -1 / 2),
        (1 / 2, 1 / 2, 1 / 2),
        (-1 / 2, -1 / 2, -1 / 2),
    },
    # TRI1b
    {
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (1 / 2, -1 / 2, 0),
        (-1 / 2, 1 / 2, 0),
        (-1 / 2, 0, 1 / 2),
        (1 / 2, 0, -1 / 2),
        (0, -1 / 2, 1 / 2),
        (0, 1 / 2, -1 / 2),
        (-1 / 2, -1 / 2, 1 / 2),
        (1 / 2, 1 / 2, -1 / 2),
    },
    # TRI2b
    {
        (0, 0, 1 / 2),
        (0, 0, -1 / 2),
        (0, 1 / 2, 0),
        (0, -1 / 2, 0),
        (1 / 2, 0, 0),
        (-1 / 2, 0, 0),
        (0, -1 / 2, 1 / 2),
        (0, 1 / 2, -1 / 2),
        (-1 / 2, -1 / 2, 1 / 2),
        (1 / 2, 1 / 2, -1 / 2),
        (-1 / 2, 0, 1 / 2),
        (1 / 2, 0, -1 / 2),
    },
]

container = []
for i in range(len(lattices)):
    container.append((examples[lattices[i].lower()], planes_test[i]))


@pytest.mark.parametrize(
    "lattice, real_planes",
    container,
    ids=lattices,
)
def test_define_planes(lattice, real_planes):
    lattice_points, vectors = get_lattice_points(lattice.reciprocal_cell)
    planes = define_planes(lattice_points, vectors, relative=True)
    assert len(planes) == len(real_planes)
    assert set(planes) == real_planes


# TEST CORNERS

corners_test = [
    # CUB
    8,
    # FCC
    24,
    # BCC
    14,
    # TET
    8,
    # BCT1
    18,
    # BCT2
    24,
    # ORC
    8,
    # ORCF1
    18,
    # ORCF2
    24,
    # ORCF3
    14,
    # ORCI
    24,
    # ORCC
    12,
    # HEX
    12,
    # RHL1
    24,
    # RHL2
    14,
    # MCL
    12,
    # MCLC1
    24,
    # MCLC2
    18,
    # MCLC3
    18,
    # MCLC4
    14,
    # MCLC5
    24,
    # TRI1a
    24,
    # TRI2a
    18,
    # TRI1b
    24,
    # TRI2b
    18,
]

container = []
for i in range(len(lattices)):
    container.append((examples[lattices[i].lower()], corners_test[i]))


@pytest.mark.parametrize(
    "lattice, number_of_corners",
    container,
    ids=lattices,
)
def test_define_corners(lattice, number_of_corners):
    lattice_points, vectors = get_lattice_points(lattice.reciprocal_cell)
    planes = define_planes(lattice_points, vectors)
    corners, plane_indices = define_corners(planes, vectors)

    assert len(corners) == number_of_corners
    assert len(plane_indices) == number_of_corners


# TEST EDGES

edges_test = [
    # CUB
    12,
    # FCC
    36,
    # BCC
    24,
    # TET
    12,
    # BCT1
    28,
    # BCT2
    36,
    # ORC
    12,
    # ORCF1
    28,
    # ORCF2
    36,
    # ORCF3
    24,
    # ORCI
    36,
    # ORCC
    18,
    # HEX
    18,
    # RHL1
    36,
    # RHL2
    24,
    # MCL
    18,
    # MCLC1
    36,
    # MCLC2
    28,
    # MCLC3
    28,
    # MCLC4
    24,
    # MCLC5
    36,
    # TRI1a
    36,
    # TRI2a
    28,
    # TRI1b
    36,
    # TRI2b
    28,
]

container = []
for i in range(len(lattices)):
    container.append((examples[lattices[i].lower()], edges_test[i]))


@pytest.mark.parametrize(
    "lattice, number_of_edges",
    container,
    ids=lattices,
)
def test_define_edges(lattice, number_of_edges):
    lattice_points, vectors = get_lattice_points(lattice.reciprocal_cell)
    planes = define_planes(lattice_points, vectors)
    corners, plane_indices = define_corners(planes, vectors)
    edges = define_edges(corners, plane_indices)

    assert len(edges) == number_of_edges
